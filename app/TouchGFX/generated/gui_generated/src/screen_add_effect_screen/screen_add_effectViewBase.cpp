/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen_add_effect_screen/screen_add_effectViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

screen_add_effectViewBase::screen_add_effectViewBase() :
    updateItemCallback(this, &screen_add_effectViewBase::updateItemCallbackHandler),
    buttonCallback(this, &screen_add_effectViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 320, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    text_title.setXY(83, 6);
    text_title.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_title.setLinespacing(0);
    text_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YN5I));
    add(text_title);

    btn_opt.setXY(0, 0);
    btn_opt.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_DISABLED_ID));
    btn_opt.setLabelText(touchgfx::TypedText(T___SINGLEUSE_4D2T));
    btn_opt.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_opt.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_opt.setAction(buttonCallback);
    add(btn_opt);

    btn_add.setXY(260, 0);
    btn_add.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_DISABLED_ID));
    btn_add.setLabelText(touchgfx::TypedText(T___SINGLEUSE_LM13));
    btn_add.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_add.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(btn_add);

    scrollList_FX.setPosition(0, 69, 320, 150);
    scrollList_FX.setHorizontal(true);
    scrollList_FX.setCircular(false);
    scrollList_FX.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollList_FX.setSwipeAcceleration(10);
    scrollList_FX.setDragAcceleration(10);
    scrollList_FX.setNumberOfItems(2);
    scrollList_FX.setPadding(60, 0);
    scrollList_FX.setSnapping(true);
    scrollList_FX.setDrawableSize(151, 25);
    scrollList_FX.setDrawables(scrollList_FXListItems, updateItemCallback);
    add(scrollList_FX);
}

screen_add_effectViewBase::~screen_add_effectViewBase()
{

}

void screen_add_effectViewBase::setupScreen()
{
    scrollList_FX.initialize();
    for (int i = 0; i < scrollList_FXListItems.getNumberOfDrawables(); i++)
    {
        scrollList_FXListItems[i].initialize();
    }
}

void screen_add_effectViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btn_opt)
    {
        //btn_opt_pressed
        //When btn_opt clicked change screen to screen_settings
        //Go to screen_settings with no screen transition
        application().gotoscreen_settingsScreenNoTransition();
    }
}

void screen_add_effectViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollList_FXListItems)
    {
        scrollList_FXUpdateItem(scrollList_FXListItems[containerIndex], itemIndex);
    }
}
