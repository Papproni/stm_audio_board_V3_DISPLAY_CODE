/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen_settings_screen/screen_settingsViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

screen_settingsViewBase::screen_settingsViewBase() :
    buttonCallback(this, &screen_settingsViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 320, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    MAIN_BACKGROUND.setPosition(0, 0, 320, 240);
    MAIN_BACKGROUND.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(MAIN_BACKGROUND);

    btn_performance_mode.setXY(10, 10);
    btn_performance_mode.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID));
    btn_performance_mode.setLabelText(touchgfx::TypedText(T___SINGLEUSE_3ICT));
    btn_performance_mode.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_performance_mode.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_performance_mode.setAction(buttonCallback);
    add(btn_performance_mode);

    btn_editor_mode.setXY(168, 10);
    btn_editor_mode.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID));
    btn_editor_mode.setLabelText(touchgfx::TypedText(T___SINGLEUSE_RDR0));
    btn_editor_mode.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_editor_mode.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_editor_mode.setAction(buttonCallback);
    add(btn_editor_mode);

    btn_info.setXY(10, 165);
    btn_info.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID));
    btn_info.setLabelText(touchgfx::TypedText(T___SINGLEUSE_2SB5));
    btn_info.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_info.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_info.setAction(buttonCallback);
    add(btn_info);

    btn_save.setXY(10, 87);
    btn_save.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID));
    btn_save.setLabelText(touchgfx::TypedText(T___SINGLEUSE_MVZP));
    btn_save.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_save.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(btn_save);

    btn_tuner.setXY(168, 87);
    btn_tuner.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID));
    btn_tuner.setLabelText(touchgfx::TypedText(T___SINGLEUSE_6BO0));
    btn_tuner.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_tuner.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_tuner.setAction(buttonCallback);
    add(btn_tuner);

    btn_config.setXY(168, 165);
    btn_config.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_TINY_ROUNDED_PRESSED_ID));
    btn_config.setLabelText(touchgfx::TypedText(T___SINGLEUSE_0GS3));
    btn_config.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_config.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn_config.setAction(buttonCallback);
    add(btn_config);
}

screen_settingsViewBase::~screen_settingsViewBase()
{

}

void screen_settingsViewBase::setupScreen()
{

}

void screen_settingsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btn_performance_mode)
    {
        //To_perf_mode_screen
        //When btn_performance_mode clicked change screen to screen_perf_mode
        //Go to screen_perf_mode with no screen transition
        application().gotoscreen_perf_modeScreenNoTransition();
    }
    if (&src == &btn_info)
    {
        //To_info_screen
        //When btn_info clicked change screen to screen_info
        //Go to screen_info with no screen transition
        application().gotoscreen_infoScreenNoTransition();
    }
    if (&src == &btn_editor_mode)
    {
        //To_edit
        //When btn_editor_mode clicked change screen to screen_edit
        //Go to screen_edit with no screen transition
        application().gotoscreen_editScreenNoTransition();
    }
    if (&src == &btn_tuner)
    {
        //To_tuning
        //When btn_tuner clicked change screen to screen_tuning
        //Go to screen_tuning with no screen transition
        application().gotoscreen_tuningScreenNoTransition();
    }
    if (&src == &btn_config)
    {
        //To_config
        //When btn_config clicked change screen to screen_config
        //Go to screen_config with no screen transition
        application().gotoscreen_configScreenNoTransition();
    }
}
