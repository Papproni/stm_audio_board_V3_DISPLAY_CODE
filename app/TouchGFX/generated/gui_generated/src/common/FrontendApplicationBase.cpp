/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/screen_settings_screen/screen_settingsView.hpp>
#include <gui/screen_settings_screen/screen_settingsPresenter.hpp>
#include <gui/screen_tuning_screen/screen_tuningView.hpp>
#include <gui/screen_tuning_screen/screen_tuningPresenter.hpp>
#include <gui/screen_config_screen/screen_configView.hpp>
#include <gui/screen_config_screen/screen_configPresenter.hpp>
#include <gui/screen_perf_mode_screen/screen_perf_modeView.hpp>
#include <gui/screen_perf_mode_screen/screen_perf_modePresenter.hpp>
#include <gui/screen_info_screen/screen_infoView.hpp>
#include <gui/screen_info_screen/screen_infoPresenter.hpp>
#include <gui/screen_fx_params_screen/screen_fx_paramsView.hpp>
#include <gui/screen_fx_params_screen/screen_fx_paramsPresenter.hpp>
#include <gui/screen_loop_screen/screen_loopView.hpp>
#include <gui/screen_loop_screen/screen_loopPresenter.hpp>
#include <gui/screen_edit_screen/screen_editView.hpp>
#include <gui/screen_edit_screen/screen_editPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
}

/*
 * Screen Transition Declarations
 */

// screen_settings

void FrontendApplicationBase::gotoscreen_settingsScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_settingsScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_settingsScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_settingsView, screen_settingsPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_tuning

void FrontendApplicationBase::gotoscreen_tuningScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_tuningScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_tuningScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_tuningView, screen_tuningPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_perf_mode

void FrontendApplicationBase::gotoscreen_perf_modeScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_perf_modeScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_perf_modeScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_perf_modeView, screen_perf_modePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_info

void FrontendApplicationBase::gotoscreen_infoScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_infoScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_infoScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_infoView, screen_infoPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_fx_params

void FrontendApplicationBase::gotoscreen_fx_paramsScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_fx_paramsScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_fx_paramsScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_fx_paramsView, screen_fx_paramsPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_loop

void FrontendApplicationBase::gotoscreen_loopScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_loopScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_loopScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_loopView, screen_loopPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_edit

void FrontendApplicationBase::gotoscreen_editScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_editScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_editScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_editView, screen_editPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
